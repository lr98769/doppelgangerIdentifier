use_readme_rmd()
library(usethis)
use_readme_rmd()
build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data("rc_metadata")
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data("rc_metadata")
rc
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults$Batch_corrected)
ppccDoppelgangerResults$Batch_corrected
head(ppccDoppelgangerResults$Batch_corrected)
View(ppccDoppelgangerResults$Batch_corrected)
paste("PPCC cut off:", ppccDoppelgangerResults$cut_off)
visualisePPCCDoppelgangers(ppccDoppelgangerResults = ppccDoppelgangerResults)
visualisePPCCDoppelgangers(ppccDoppelgangerResults = ppccDoppelgangerResults)
functionalityResults = doppelgangerVerification(
experimentPlanFilename = "tutorial/experimentPlan.csv",
raw_data = rc,
meta_data = rc_metadata)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
displayVerificationResults(functionalityResults,
ori_train_valid_names,
new_train_valid_names)
usethis::use_readme_rmd()
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
View(ppccDoppelgangerResults$Batch_corrected)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults$Batch_corrected)
View(ppccDoppelgangerResults$PPCC_matrix)
paste("PPCC cut off:", ppccDoppelgangerResults$cut_off)
visualisePPCCDoppelgangers(ppccDoppelgangerResults = ppccDoppelgangerResults)
functionalityResults = verifyDoppelgangers(
experimentPlanFilename = "tutorial/experimentPlan.csv",
raw_data = rc,
meta_data = rc_metadata)
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
functionalityResults = verifyDoppelgangers(
experimentPlanFilename = "tutorial/experimentPlan.csv",
raw_data = rc,
meta_data = rc_metadata)
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
functionalityResults = verifyDoppelgangers(
experimentPlanFilename = "tutorial/experimentPlan.csv",
raw_data = rc,
meta_data = rc_metadata)
View(functionalityResults$combat_minmax)
View(functionalityResults$accuracy_df)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(functionalityResults,
ori_train_valid_names,
new_train_valid_names)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
library("doppelgangerIdentifier")
verificationResults = verifyDoppelgangers(
experimentPlanFilename = "tutorial/experimentPlan.csv",
raw_data = rc,
meta_data = rc_metadata)
View(verificationResults$combat_minmax)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
verifyDoppelgangers?
adfas
?verifyDoppelgangers
?visualiseVerificationResults
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
?visualiseVerificationResults
library(doppelgangerIdentifier)
?verifyDoppelgangers
?visualiseVerificationResults
remove.packages("doppelgangerIdentifier", lib="~/R/win-library/4.0")
library(doppelgangerIdentifier)
?visualiseVerificationResults
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
library(doppelgangerIdentifier)
?visualiseVerificationResults
library(doppelgangerIdentifier)
?verifyDoppelgangers
library(doppelgangerIdentifier)
?verifyDoppelgangers
library(doppelgangerIdentifier)
verificationResults = verifyDoppelgangers(
experimentPlanFilename = "tutorial/experimentPlan.csv",
raw_data = rc,
meta_data = rc_metadata)
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
library(callr)
install.packages(callr)
install.packages("callr")
install.packages("callr")
build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site_github_pages()
pkgdown::build_site()
library(callr)
pkgdown::build_site()
library(pkgdown)
detach("package:pkgdown", unload = TRUE)
remove.packages("pkgdown", lib="~/R/win-library/4.0")
install.packages(pkgdown)
install.packages("pkgdown")
pkgdown::build_site()
usethis::use_pkgdown()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
View(rc)
View(rc_metadata)
?dmd
library(doppelgangerIdentifier)
?dmd
??dmd
?r
?rc
?dmd
library(doppelgangerIdentifier)
?dmd
library(doppelgangerIdentifier)
?dmd
library(doppelgangerIdentifier)
?dmd
?all
?dmd
library(doppelgangerIdentifier)
?dmd
?all
?dmd
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
?dmd
library(doppelgangerIdentifier)
?dmd
?all
?all
library(doppelgangerIdentifier)
?all
library(doppelgangerIdentifier)
?all
library(doppelgangerIdentifier)
?dmd
?all
?all_metadata
?dmd_metadata
library(doppelgangerIdentifier)
?dmd_metadata
usethis::use_pkgdown_github_pages()
cor(c(1,2), c(1, 2))
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults$Batch_corrected)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
verificationResults = verifyDoppelgangers(
"tutorial/experimentPlan.csv", rc, rc_metadata)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
"ComBat" %in% c("ComBat", "ComBat_Seq")
if(FALSE){}else if {print("hey")}
"hey" %in% "hey gthere"
"hey there" %in% "hey"
contains("hey there", "hey")
grepl("hey", "hey there")
grepl("hey", c("hey there", "meh"))
test = c(1, 2, 3)
test[grepl(1, test)] = "potato"
test
test[grepl("potato", test)]
test = c(test, test)
test
test[grepl("potato", test)]
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
library(doppelgangerIdentifier)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
verificationResults = verifyDoppelgangers(
"tutorial/experimentPlan.csv", rc, rc_metadata)
View(verificationResults$combat_minmax)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults2 <- function(verification_results,
original_train_valid_names=c(),
new_train_valid_names=c()){
library(ggplot2)
# Ensure it is in the right order
verification_results$accuracy_df$Train_Valid = factor(
verification_results$accuracy_df$Train_Valid,
levels = unique(verification_results$accuracy_df$Train_Valid))
# If no new name is given
if (length(original_train_valid_names)==0 || length(new_train_valid_names)==0){
original_train_valid_names = unique(verification_results$accuracy_df$Train_Valid)
new_train_valid_names = original_train_valid_names
}
feature_set_type = verification_results$accuracy_df$FeatureSet
feature_set_type[grepl("Random", feature_set_type)] = "Random"
top_feature_set_name = feature_set_type[grepl("Top", feature_set_type)]
bot_feature_set_name = feature_set_type[grepl("Bottom", feature_set_type)]
colour_vector = c("#ff00ff", "#00ff54", "#808A84")
name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults2 <- function(verification_results,
original_train_valid_names=c(),
new_train_valid_names=c()){
library(ggplot2)
# Ensure it is in the right order
verification_results$accuracy_df$Train_Valid = factor(
verification_results$accuracy_df$Train_Valid,
levels = unique(verification_results$accuracy_df$Train_Valid))
# If no new name is given
if (length(original_train_valid_names)==0 || length(new_train_valid_names)==0){
original_train_valid_names = unique(verification_results$accuracy_df$Train_Valid)
new_train_valid_names = original_train_valid_names
}
feature_set_type = verification_results$accuracy_df$FeatureSet
feature_set_type[grepl("Random", feature_set_type)] = "Random"
top_feature_set_name = feature_set_type[grepl("Top", feature_set_type)]
bot_feature_set_name = feature_set_type[grepl("Bottom", feature_set_type)]
colour_vector = c("#ff00ff", "#00ff54", "#808A84")
name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
print(colour_vector)
print(name_vector)
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
View(verificationResults)
View(verificationResults[["accuracy_mat"]])
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults2 <- function(verification_results,
original_train_valid_names=c(),
new_train_valid_names=c()){
library(ggplot2)
# Ensure it is in the right order
verification_results$accuracy_df$Train_Valid = factor(
verification_results$accuracy_df$Train_Valid,
levels = unique(verification_results$accuracy_df$Train_Valid))
# If no new name is given
if (length(original_train_valid_names)==0 || length(new_train_valid_names)==0){
original_train_valid_names = unique(verification_results$accuracy_df$Train_Valid)
new_train_valid_names = original_train_valid_names
}
feature_set_type = verification_results$accuracy_df$FeatureSet
feature_set_type[grepl("Random", feature_set_type)] = "Random"
top_feature_set_name = feature_set_type[grepl("Top", feature_set_type)][1]
bot_feature_set_name = feature_set_type[grepl("Bottom", feature_set_type)][1]
colour_vector = c("#ff00ff", "#00ff54", "#808A84")
name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
print(colour_vector)
print(name_vector)
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults2 <- function(verification_results,
original_train_valid_names=c(),
new_train_valid_names=c()){
library(ggplot2)
# Ensure it is in the right order
verification_results$accuracy_df$Train_Valid = factor(
verification_results$accuracy_df$Train_Valid,
levels = unique(verification_results$accuracy_df$Train_Valid))
# If no new name is given
if (length(original_train_valid_names)==0 || length(new_train_valid_names)==0){
original_train_valid_names = unique(verification_results$accuracy_df$Train_Valid)
new_train_valid_names = original_train_valid_names
}
feature_set_type = verification_results$accuracy_df$FeatureSet
feature_set_type[grepl("Random", feature_set_type)] = "Random"
top_feature_set_name = feature_set_type[grepl("Top", feature_set_type)][1]
bot_feature_set_name = feature_set_type[grepl("Bottom", feature_set_type)][1]
colour_vector = c("#ff00ff", "#00ff54", "#808A84")
name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
devtools::build_readme()
git reset HEAD^
