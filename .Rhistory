use_readme_rmd()
library(usethis)
use_readme_rmd()
build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data("rc_metadata")
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data("rc_metadata")
rc
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults$Batch_corrected)
ppccDoppelgangerResults$Batch_corrected
head(ppccDoppelgangerResults$Batch_corrected)
View(ppccDoppelgangerResults$Batch_corrected)
paste("PPCC cut off:", ppccDoppelgangerResults$cut_off)
visualisePPCCDoppelgangers(ppccDoppelgangerResults = ppccDoppelgangerResults)
visualisePPCCDoppelgangers(ppccDoppelgangerResults = ppccDoppelgangerResults)
functionalityResults = doppelgangerVerification(
experimentPlanFilename = "tutorial/experimentPlan.csv",
raw_data = rc,
meta_data = rc_metadata)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
displayVerificationResults(functionalityResults,
ori_train_valid_names,
new_train_valid_names)
