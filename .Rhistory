name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults2 <- function(verification_results,
original_train_valid_names=c(),
new_train_valid_names=c()){
library(ggplot2)
# Ensure it is in the right order
verification_results$accuracy_df$Train_Valid = factor(
verification_results$accuracy_df$Train_Valid,
levels = unique(verification_results$accuracy_df$Train_Valid))
# If no new name is given
if (length(original_train_valid_names)==0 || length(new_train_valid_names)==0){
original_train_valid_names = unique(verification_results$accuracy_df$Train_Valid)
new_train_valid_names = original_train_valid_names
}
feature_set_type = verification_results$accuracy_df$FeatureSet
feature_set_type[grepl("Random", feature_set_type)] = "Random"
top_feature_set_name = feature_set_type[grepl("Top", feature_set_type)]
bot_feature_set_name = feature_set_type[grepl("Bottom", feature_set_type)]
colour_vector = c("#ff00ff", "#00ff54", "#808A84")
name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
print(colour_vector)
print(name_vector)
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
View(verificationResults)
View(verificationResults[["accuracy_mat"]])
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults2 <- function(verification_results,
original_train_valid_names=c(),
new_train_valid_names=c()){
library(ggplot2)
# Ensure it is in the right order
verification_results$accuracy_df$Train_Valid = factor(
verification_results$accuracy_df$Train_Valid,
levels = unique(verification_results$accuracy_df$Train_Valid))
# If no new name is given
if (length(original_train_valid_names)==0 || length(new_train_valid_names)==0){
original_train_valid_names = unique(verification_results$accuracy_df$Train_Valid)
new_train_valid_names = original_train_valid_names
}
feature_set_type = verification_results$accuracy_df$FeatureSet
feature_set_type[grepl("Random", feature_set_type)] = "Random"
top_feature_set_name = feature_set_type[grepl("Top", feature_set_type)][1]
bot_feature_set_name = feature_set_type[grepl("Bottom", feature_set_type)][1]
colour_vector = c("#ff00ff", "#00ff54", "#808A84")
name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
print(colour_vector)
print(name_vector)
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults2 <- function(verification_results,
original_train_valid_names=c(),
new_train_valid_names=c()){
library(ggplot2)
# Ensure it is in the right order
verification_results$accuracy_df$Train_Valid = factor(
verification_results$accuracy_df$Train_Valid,
levels = unique(verification_results$accuracy_df$Train_Valid))
# If no new name is given
if (length(original_train_valid_names)==0 || length(new_train_valid_names)==0){
original_train_valid_names = unique(verification_results$accuracy_df$Train_Valid)
new_train_valid_names = original_train_valid_names
}
feature_set_type = verification_results$accuracy_df$FeatureSet
feature_set_type[grepl("Random", feature_set_type)] = "Random"
top_feature_set_name = feature_set_type[grepl("Top", feature_set_type)][1]
bot_feature_set_name = feature_set_type[grepl("Bottom", feature_set_type)][1]
colour_vector = c("#ff00ff", "#00ff54", "#808A84")
name_vector = c(top_feature_set_name, bot_feature_set_name, "Random")
colour_named_vector =  setNames(colour_vector,
name_vector)
ggplot(verification_results$accuracy_df, aes(x = Train_Valid, y = Accuracy, color=feature_set_type)) +
geom_violin(adjust =4, color=rgb(1,1,1))+ #69faff
ggtitle("Accuracy of KNN Models") +
scale_color_manual(values=colour_named_vector, breaks=name_vector) +
labs(color = "Feature Set") +
geom_jitter(size=4,shape=16, position=position_jitter(0.2),  alpha=0.9) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Training-Validation Set") +
ylab("Accuracy") +
scale_x_discrete(breaks=original_train_valid_names,
labels=new_train_valid_names)
}
visualiseVerificationResults2(verificationResults,
ori_train_valid_names,
new_train_valid_names)
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
devtools::build_readme()
git reset HEAD^
dim(rc)
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
dim(rc)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
library(doppelgangerIdentifier)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults)
ppccDoppelgangerResults[["cut_off"]]
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
library(doppelgangerIdentifier)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults)
View(ppccDoppelgangerResults[["PPCC_df"]])
table(ppccDoppelgangerResults[["PPCC_df"]]$DoppelgangerLabel)
View(veri_result)
View(verificationResults)
remove.packages("doppelgangerIdentifier", lib="~/R/win-library/4.0")
library(doppelgangR)
detach("package:doppelgangR", unload = TRUE)
library(doppelgangerIdentifier)
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults$Batch_corrected)
paste("PPCC cut off:", ppccDoppelgangerResults$cut_off)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
verificationResults = verifyDoppelgangers(
"tutorial/experimentPlan.csv", rc, rc_metadata)
View(verificationResults$combat_minmax)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
library("doppelgangerIdentifier")
bc = readRDS("tutorial/dataset/bc_her_tut.rds")
library("doppelgangerIdentifier")
bc = readRDS("tutorial/dataset/bc_her2_tut.rds")
bc_meta = readRDS("tutorial/dataset/bc_her2_meta_tut.rds")
# Get PPCC Data Doppelgangers
start_time = Sys.time()
doppel_bc = getPPCCDoppelgangers(
raw_data = bc,
meta_data = bc_meta,
do_batch_corr = TRUE,
do_min_max = TRUE,
batch_corr_method = "ComBat_seq"
)
end_time = Sys.time()
end_time - start_time
visualisePPCCDoppelgangers(doppel_bc)
start_time = Sys.time()
valid_bc = verifyDoppelgangers(
experiment_plan_filename = ".tutorial/experiment_plans/bc_ex_plan.csv",
raw_data = bc,
meta_data = bc_meta,
batch_corr_method = "ComBat_seq",
k=9,
size_of_val_set = 48,
feature_set_portion = 0.01
)
start_time = Sys.time()
veri_bc = verifyDoppelgangers(
experiment_plan_filename = ".tutorial/experiment_plans/bc_ex_plan.csv",
raw_data = bc,
meta_data = bc_meta,
batch_corr_method = "ComBat_seq",
k=9,
size_of_val_set = 48,
feature_set_portion = 0.01
)
start_time = Sys.time()
veri_bc = verifyDoppelgangers(
experiment_plan_filename = "tutorial/experiment_plans/bc_ex_plan.csv",
raw_data = bc,
meta_data = bc_meta,
batch_corr_method = "ComBat_seq",
k=9,
size_of_val_set = 48,
feature_set_portion = 0.01
)
library("doppelgangerIdentifier")
start_time = Sys.time()
veri_bc = verifyDoppelgangers(
experiment_plan_filename = "tutorial/experiment_plans/bc_ex_plan.csv",
raw_data = bc,
meta_data = bc_meta,
batch_corr_method = "ComBat_seq",
k=9,
size_of_val_set = 48,
feature_set_portion = 0.01
)
bc = readRDS("tutorial/dataset/bc_her2_tut.rds")
bc_meta = readRDS("tutorial/dataset/bc_her2_meta_tut.rds")
start_time = Sys.time()
veri_bc = verifyDoppelgangers(
experiment_plan_filename = "tutorial/experiment_plans/bc_ex_plan.csv",
raw_data = bc,
meta_data = bc_meta,
batch_corr_method = "ComBat_seq",
k=9,
size_of_val_set = 48,
feature_set_portion = 0.01
)
end_time = Sys.time()
end_time - start_time
visualiseVerificationResults(veri_bc)
library("doppelgangerIdentifier")
visualiseVerificationResults(veri_bc)
ori_train_valid_names = c("Doppel_0","Doppel_6", "Doppel_12", "Doppel_18", "Doppel_24", "Neg_Con", "Pos_Con_24")
new_train_valid_names = c("0 Doppel", "6 Doppel", "12 Doppel", "18 Doppel", "24 Doppel", "Binomial", "24 Perfect Leakage")
visualiseVerificationResults(
veri_bc,
original_train_valid_names = ori_train_valid_names,
new_train_valid_names = new_train_valid_names
)
View(rc_meta)
library("doppelgangerIdentifier")
bc = readRDS("tutorial/dataset/bc_her2_tut.rds")
bc_meta = readRDS("tutorial/dataset/bc_her2_meta_tut.rds")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
View(rc_metadata)
citation(utils)
citation("utils)
sadf
)
citation("utils")
citation("R.utils")
View(rc)
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
View(rc)
View(rc_meta)
library("doppelgangerIdentifier")
library("doppelgangerIdentifier")
View(rc_metadata)
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
remove.packages("doppelgangerIdentifier", lib="~/R/win-library/4.0")
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
View(ppccDoppelgangerResults$Processed_data)
paste("PPCC cut off:", ppccDoppelgangerResults$cut_off)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
ori_train_valid_names = c("Doppel_0","Doppel_6", "Doppel_12", "Doppel_18", "Doppel_24", "Neg_Con", "Pos_Con_24")
new_train_valid_names = c("0 Doppel", "6 Doppel", "12 Doppel", "18 Doppel", "24 Doppel", "Binomial", "24 Perfect Leakage")
visualiseVerificationResults(
veri_bc,
original_train_valid_names = ori_train_valid_names,
new_train_valid_names = new_train_valid_names
)
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
library("doppelgangerIdentifier")
bc = readRDS("tutorial/dataset/bc_her2_tut.rds")
bc_meta = readRDS("tutorial/dataset/bc_her2_meta_tut.rds")
# Get PPCC Data Doppelgangers
start_time = Sys.time()
doppel_bc = getPPCCDoppelgangers(
raw_data = bc,
meta_data = bc_meta,
do_batch_corr = TRUE,
do_min_max = TRUE,
batch_corr_method = "ComBat_seq"
)
end_time = Sys.time()
end_time - start_time
visualisePPCCDoppelgangers(doppel_bc)
start_time = Sys.time()
veri_bc = verifyDoppelgangers(
experiment_plan_filename = "tutorial/experiment_plans/bc_ex_plan.csv",
raw_data = bc,
meta_data = bc_meta,
batch_corr_method = "ComBat_seq",
k=9,
size_of_val_set = 48,
feature_set_portion = 0.01
)
end_time = Sys.time()
end_time - start_time
ori_train_valid_names = c("Doppel_0","Doppel_6", "Doppel_12", "Doppel_18", "Doppel_24", "Neg_Con", "Pos_Con_24")
new_train_valid_names = c("0 Doppel", "6 Doppel", "12 Doppel", "18 Doppel", "24 Doppel", "Binomial", "24 Perfect Leakage")
visualiseVerificationResults(
veri_bc,
original_train_valid_names = ori_train_valid_names,
new_train_valid_names = new_train_valid_names
)
View(bc)
View(rc_metadata)
View(doppel_bc)
View(doppel_bc[["PPCC_df"]])
View(veri_bc)
start_time = Sys.time()
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
end_time = Sys.time()
end_time-start_time
start_time = Sys.time()
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
end_time = Sys.time()
end_time-start_time
View(verificationResults)
library("doppelgangerIdentifier")
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
#Import RC gene expression dataset
data(rc)
#Import metadata for RC gene expression dataset
data(rc_metadata)
```{r}
start_time = Sys.time()
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
end_time = Sys.time()
end_time-start_time
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
```{r}
start_time = Sys.time()
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
end_time = Sys.time()
end_time = Sys.time()
end_time-start_time
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
start_time = Sys.time()
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
end_time = Sys.time()
end_time-start_time
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
start_time = Sys.time()
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
end_time = Sys.time()
end_time-start_time
detach("package:doppelgangerIdentifier", unload = TRUE)
library(doppelgangerIdentifier)
start_time = Sys.time()
verificationResults = verifyDoppelgangers(
"tutorial/experiment_plans/rc_ex_plan.csv", rc, rc_metadata)
end_time = Sys.time()
end_time-start_time
start_time = Sys.time()
ppccDoppelgangerResults = getPPCCDoppelgangers(rc, rc_metadata)
end_time = Sys.time()
end_time-start_time
View(ppccDoppelgangerResults)
View(ppccDoppelgangerResults[["Processed_data"]])
View(ppccDoppelgangerResults[["PPCC_df"]])
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
jpeg(filename = "Figure_4.jpg",
width = 10, height = 4, units = "px", res=300)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
jpeg(filename = "Figure_4.jpg",
width = 1200, height = 600, units = "px", res=300)
jpeg(filename = "Figure_4.jpg",
width = 1200, height = 800, units = "px", res=300)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
dev.off()
jpeg(filename = "Figure_4.jpg",
width = 2000, height = 800, units = "px", res=300)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
dev.off()
jpeg(filename = "Figure_4.jpg",
width = 1400, height = 800, units = "px", res=300)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
dev.off()
jpeg(filename = "Figure_4.jpg",
width = 2000, height = 1000, units = "px", res=300)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
dev.off()
jpeg(filename = "Figure_4.jpg",
width = 1800, height = 900, units = "px", res=300)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
dev.off()
jpeg(filename = "Figure_4.jpg",
width = 2000, height = 900, units = "px", res=300)
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
dev.off()
visualisePPCCDoppelgangers(ppccDoppelgangerResults)
ppccDoppelgangerResults$PPCC_df[ppccDoppelgangerResults$PPCC_df$DoppelgangerLabel == "Doppelganger"]
dim(ppccDoppelgangerResults$PPCC_df[ppccDoppelgangerResults$PPCC_df$DoppelgangerLabel == "Doppelganger", ])
View(verificationResults)
View(verificationResults[["combat_minmax"]])
View(verificationResults[["combat_minmax"]])
View(verificationResults[["accuracy_mat"]])
View(verificationResults[["accuracy_df"]])
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
jpeg(filename = "Figure_5.jpg",
width = 2000, height = 900, units = "px", res=300)
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
dev.off()
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
jpeg(filename = "Figure_5.jpg",
width = 2200, height = 1000, units = "px", res=300)
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
dev.off()
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
jpeg(filename = "Figure_5.jpg",
width = 2400, height = 1000, units = "px", res=300)
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
dev.off()
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
jpeg(filename = "Figure_5.jpg",
width = 2600, height = 1200, units = "px", res=300)
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
dev.off()
ori_train_valid_names = c("Doppel_0","Doppel_2", "Doppel_4", "Doppel_6", "Doppel_8", "Neg_Con", "Pos_Con")
new_train_valid_names = c("0 Doppel", "2 Doppel", "4 Doppel", "6 Doppel", "8 Doppel", "Binomial", "Perfect Leakage")
jpeg(filename = "Figure_5.jpg",
width = 2600, height = 1400, units = "px", res=300)
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
dev.off()
visualiseVerificationResults(verificationResults,
ori_train_valid_names,
new_train_valid_names)
